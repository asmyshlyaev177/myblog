# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

#user nobody nogroup;
user nginx;
worker_processes 1;
worker_rlimit_nofile 90000;
error_log /var/log/nginx/error.log;
pid /var/run/nginx.pid;

# Load dynamic modules. See /usr/share/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections  40000;
}


http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  /var/log/nginx/access.log  main;
	
    proxy_cache_path /tmp/nginx/cache levels=1:2 keys_zone=one:30m max_size=324m inactive=60m;
    proxy_temp_path /tmp/nginx 1 2;   

    gzip on;
    gzip_proxied no-cache no-store private expired auth;
    gunzip on;
    gzip_static on;
    gzip_vary           on;
    gzip_buffers 16 8k;    	
    gzip_comp_level 2;
    gzip_min_length 200;
    gzip_http_version 1.0;
    gzip_types
    # text/html is always compressed by HttpGzipModule
    text/css
    text/javascript
    text/xml
    text/plain
    text/x-component
    application/javascript
    application/json
    application/xml
    application/rss+xml
    font/truetype
    font/opentype
    application/vnd.ms-fontobject
    image/svg+xml;

 
    open_file_cache max=50000 inactive=60s; 
    open_file_cache_valid 180s; 
    client_header_buffer_size 8k;
    large_client_header_buffers 4 8k;
    open_file_cache_errors   on;
    output_buffers 128 32k;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   120;
    keepalive_requests 1000;
    reset_timedout_connection on;
    types_hash_max_size 2048;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    include /etc/nginx/conf.d/*.conf;
  upstream app_server {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response

    # for UNIX domain socket setups
    server unix:/root/myblog/myblog/uwsgi.sock fail_timeout=0;

    # for a TCP configuration
    #server 127.0.0.1:8000 fail_timeout=0;
  }

  server {
    # if no Host match, close the connection to prevent host spoofing
    #listen 80 deferred default_server;
    return 444;
  }


  server {
    # use 'listen 8080 deferred;' for Linux
    listen 80 deferred backlog=40096;
    proxy_cache one;
    proxy_cache_key "$host$request_uri$http_x_requested_with$cookie_sessionid";
    #proxy_cache_key "$request_method$host$request_uri$http_x_requested_with";
    proxy_cache_methods GET HEAD;
    proxy_cache_valid 200 302 301 15m;
    proxy_cache_bypass $cookie_nocache $arg_nocache $http_pragma $http_authorization;
    proxy_no_cache $cookie_nocache $arg_nocache $http_pragma $http_authorization;
    proxy_buffering on;

    #proxy_ignore_headers "Set-Cookie";
    #proxy_hide_header "Set-Cookie";

    client_max_body_size 4G;

    # set the correct host(s) for your site
    server_name 192.168.1.70;

    keepalive_timeout 10;

    # path for static files
    root /root/myblog/myblog;

    location / {
      # checks for static file, if not found proxy to app

      try_files $uri @proxy_to_app;
    }

   location = /favicon.ico { access_log off; log_not_found off; }

    location /static {
        root /root/myblog/myblog/blog;
        expires 5m;
        access_log off;
        add_header Cache-Control "max-age=300 public";
    }
 
    location /media {
        root /root/myblog/myblog/blog/static;
	expires 3h;
	access_log off;
	add_header Cache-Control "max-age=10800 public";
	}
    #}


    location @proxy_to_app {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      # enable this if and only if you use HTTPS
      # proxy_set_header X-Forwarded-Proto https;
      proxy_set_header Host $http_host;
      # we don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
      #proxy_redirect off;
      proxy_cache one;
      proxy_pass http://app_server;
	

      #expires 3m;
      #add_header Cache-Control "public";
    }

    #error_page 500 502 503 504 /500.html;
    #location = /500.html {
    #  root /root/myblog/myblog;
    #}
  }
}

