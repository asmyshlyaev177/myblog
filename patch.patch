diff --git a/blog/tasks.py b/blog/tasks.py
index 9cf2353..dde5a8e 100755
--- a/blog/tasks.py
+++ b/blog/tasks.py
@@ -1,353 +1,354 @@
-from celery import Celery
-from datetime import timedelta
-import os, datetime, json, re
-from blog.models import (myUser, Post, Tag, Category, Comment, Complain)
-from django.utils.text import slugify
-from bs4 import BeautifulSoup
-from PIL import Image
-from urllib.parse import urlparse, urlencode
-import datetime, pytz
-from django.utils.encoding import uri_to_iri, iri_to_uri
-from urllib.request import urlopen, Request
-from blog.functions import (srcsets, srcsetThumb, saveImage,
-                            stripMediaFromPath,
-                           findLink, findFile, cleanTagsFromSoup)
-from django.core.cache import cache
-from channels import Group
-from myblog.celery import app
-
-delta_tz = datetime.timedelta(hours=+3)
-tz = datetime.timezone(delta_tz)
-
-
-@app.task(name="Rate")
-def Rate(userid, date_joined, votes_type, type, elem_id, vote):
-    """
-    Оценка постов и комментов
-    """
-    if type == "post":
-        element = Post.objects.only('id', 'rateable', 'category')\
-            .select_related('category').get(id=elem_id)
-    elif type == "comment":
-        element = Comment.objects.only('id').get(id=elem_id)
-
-    delta = datetime.timedelta(weeks=4)
-    dt = datetime.datetime.now(tz=tz)
-    uv = cache.get('user_votes_' + str(userid))
-
-    if uv is None:   # user votes кол-во голосов у юзеров
-        date_joined = pytz.utc.localize\
-            (datetime.datetime.strptime(date_joined, '%Y_%m_%d'))
-        user_rating = myUser.objects.only('rating').get(id=userid)
-        votes = {}
-        if date_joined < dt - delta:
-            coef = 0.25
-            votes['votes'] = 200
-        else:
-            coef = 0.0
-            votes['votes'] = 100
-
-        votes['weight'] = 0.25 + coef + user_rating.rating / 50
-
-        cache.set('user_votes_' + str(userid), votes, timeout=150)  # 86400 -1 day
-        uv = votes
-
-    uv_ttl = cache.ttl('user_votes_' + str(userid))
-
-    if uv['votes'] > 0:
-        p_data = {}
-        today = datetime.datetime.today().strftime('%Y_%m_%d_%H_%M_%S_%f')
-        if vote == str(1):
-            p_data['rate'] = uv['weight']
-        else:
-            p_data['rate'] = -uv['weight']
-        p_data['elem_id'] = element.id
-        if votes_type == "N":
-            # уменьшаем кол-во голосов у пользователя
-            uv['votes'] -= 1
-        r_key = 'vote_' + type + '_' + today
-
-        if type == "post":
-            if element.rateable:
-                # example   vote_post_2016_12_17_20_14_49_915851
-                p_data['category'] = element.category.id
-                cache.set(r_key, p_data, timeout=3024000)
-        elif type == "comment":
-                # example vote_comment_2016_12_24_23_16_35_968626
-                # {'elem_id': 55, 'rate': -0.5}
-            cache.set(r_key, p_data, timeout=3024000)
-
-        cache.set('user_votes_' + str(userid), uv, timeout=uv_ttl)
-
-        return "Element type {} with id {} rated".format(str(type), str(elem_id))
-    else:
-        return "No votes for user with id {},\
-            type {} with id {} rated"\
-            .format(str(user_id), str(type), str(elem_id))
-
-
-@app.task(name='ComplainObj')
-def ComplainObj(type, objid, userid, reason):
-    """
-    При жалобе создаём новый объект или обновляем существующий
-    """
-    if type == "comment":
-        obj = Comment.objects.only('id', 'can_complain').get(id=objid)
-    else:
-        obj = Post.objects.only('id', 'can_complain').get(id=objid)
-
-    user = myUser.objects.only('id', 'rating', 'email').get(id=userid)
-    if obj.can_complain:
-        if type =="comment":
-            complain, new = Complain.objects.get_or_create(comment=obj)
-        else:
-            complain, new = Complain.objects.get_or_create(post=obj)
-        
-        if not user.email in complain.users_complained:
-            complain_raw=json.loads(complain.users_complained)
-            complain_raw[user.email] = reason
-            complain.users_complained = json.dumps(complain_raw)
-            complain.score += user.rating
-            complain.save()
-    
-    
-
-@app.task(name="CalcRating")
-def CalcRating():
-    """
-    Подсчёт рейтинга постов, комментов и юзеров
-    """
-    # hot_rating = 1.0
-    # cat_list = Category.objects.all()
-    # today = datetime.datetime.today().strftime('%H')
-
-    # рэйтинг для комментов
-    votes_comment = cache.iter_keys('vote_comment_*')
-    comments_rates = {}
-    for i in votes_comment:
-        vote = cache.get(i)
-        cache.delete(i)
-        if not vote['elem_id'] in comments_rates:
-            comments_rates[vote['elem_id']] = {}
-            comments_rates[vote['elem_id']]['rate'] = vote['rate']
-            comments_rates[vote['elem_id']]['id'] = vote['elem_id']
-        else:
-            comments_rates[vote['elem_id']]['rate'] += vote['rate']
-    del votes_comment
-    comments = Comment.objects.filter(id__in=(comments_rates))
-    for i in comments_rates:  # update rating on comments
-        comment = comments.get(id=i)
-        cache_str = "comment_" + str(comment.post.id)
-        cache.delete(cache_str)
-        comment.rating += comments_rates[i]['rate']
-        comment.save()
-
-    votes_post = cache.iter_keys('vote_post_*')
-    posts_rates = {}
-    for i in votes_post:
-        vote = cache.get(i)
-        cache.delete(i)
-        if not vote['elem_id'] in posts_rates:
-            posts_rates[vote['elem_id']] = {}
-            posts_rates[vote['elem_id']]['category'] = vote['category']
-            posts_rates[vote['elem_id']]['rate'] = vote['rate']
-            posts_rates[vote['elem_id']]['id'] = vote['elem_id']
-        else:
-            posts_rates[vote['elem_id']]['rate'] += vote['rate']
-
-    # cache.set('rating_post_day_' + today, posts, timeout=88000)
-    del votes_post
-    posts = Post.objects.filter(id__in=(posts_rates)).select_related('author')
-    for post_id in posts_rates:  # update rating on posts
-        post = posts.get(id=post_id)
-        post.rating += posts_rates[post_id]['rate']
-        post.author.rating += posts_rates[post_id]['rate'] / 30
-        post.save()
-        post.author.save()
-        cache_str = "page_" + str(post.category.slug) + "_*"
-        cache.delete_pattern(cache_str)
-    cache.delete_pattern("page_None_*")
-    cache.delete_pattern("good_posts_*")
-
-
-@app.task(name="commentImage")
-def commentImage(comment_id):
-    """
-    Конвертирование картинок в комментах
-    """
-    comment_raw = Comment.objects.select_related('author').get(id=comment_id)
-    soup = srcsets(comment_raw.text, True)
-    # выравниваем видео по центру
-    ifr_links = soup.find_all("iframe")
-    ifr_class = []
-    if len(ifr_links) != 0:
-        for i in ifr_links:
-            for j in i['class']:
-                ifr_class.append(j)
-            ifr_class = [item for item in ifr_class if not item.startswith('center-align')]
-            ifr_class.append('center-align')
-            i['class'] = ifr_class
-
-    comment_raw.text = cleanTagsFromSoup(soup)
-    comment_raw.save()
-
-    cache_str = "comment_" + str(comment_raw.post.id)
-    cache.delete(cache_str)
-    cache_str= "count_comments_" + str(comment_raw.post.id)
-    cache.delete(cache_str)
-
-    comment = {}
-    comment['id'] = comment_raw.id
-    if comment_raw.parent:
-        comment['parent'] = comment_raw.parent.id
-    comment['author'] = comment_raw.author.username
-    if comment_raw.author.avatar:
-        comment['avatar'] = comment_raw.author.avatar.url
-    else:
-        comment['avatar'] = "/media/avatars/admin/avatar.jpg"
-
-    if comment_raw.level != 0:
-        comment['parent'] = comment_raw.parent.id
-    else:
-        comment['parent'] = 0
-    comment['text'] = comment_raw.text
-    comment['level'] = comment_raw.level
-    comment['comment'] = 1
-    comment['created'] = (comment_raw.created + delta_tz).strftime('%Y.%m.%d %H:%M')
-    group = comment_raw.post.get_absolute_url().strip('/').split('/')[-1].split('-')[-1]
-    Group(group).send({
-        # "text": "[user] %s" % message.content['text'],
-        "text": json.dumps(comment),
-                        })
-    return "Comment with id {} from user {} \
-        proccessed".format(str(comment_id),
-        str(comment_raw.author.username))
-
-
-@app.task(name="addPost")
-def addPost(post_id, tag_list, moderated, group=None):
-    """
-    Обработка поста при добавлении
-    Тэги, сжатие и конвертация изображений и т.д.
-    Пост_id, лист тэгов, разрешение добавлять посты без проверки
-    и группу куда прислать уведомление о добавлении через сокет(при редактировании)
-    """
-    post_raw = Post.objects.select_related().prefetch_related().get(id=post_id)
-    nsfw = post_raw.private
-    have_new_tags = False
-    _ = False
-    post_raw.tags.clear()
-    tag = None
-    for i in tag_list:
-        if len(i) > 2:
-            if nsfw:
-                tag_url = slugify(i.lower() + "_nsfw", allow_unicode=True)
-                tag, _ = Tag.objects.get_or_create(name=i, url=tag_url)
-            else:
-                tag_url = slugify(i.lower(), allow_unicode=True)
-                tag, _ = Tag.objects.get_or_create(name=i, url=tag_url)
-                
-            if _:
-                have_new_tags = True
-                
-            post_raw.tags.add(tag)
-    if have_new_tags:
-        cache.delete_pattern("taglist")
-
-    if tag:
-        post_raw.main_tag = tag
-    else:
-        #tag = Tag.objects.get(id=8)
-        tag, _ = Tag.objects.get_or_create(name="Разное")
-        if _:
-            tag.url = "others"
-            tag.save()
-        post_raw.main_tag = tag
-
-    # ищем картинки в тексте
-    soup = srcsets(post_raw.text, True, post_id=post_id)
-
-    # выравниваем видео по центру
-    ifr_links = soup.find_all("iframe")
-    ifr_class = []
-    if len(ifr_links) != 0:
-        for i in ifr_links:
-            for j in i['class']:
-                ifr_class.append(j)
-            ifr_class = [item for item in ifr_class if not item.startswith('center-align')]
-            ifr_class.append('center-align')
-            i['class'] = ifr_class
-
-    post_raw.text = cleanTagsFromSoup(soup)
-
-    # image from url
-
-    if post_raw.image_url:
-        today = datetime.date.today()
-        upload_path1 = '/root/myblog/myblog/blog/static/media/' + \
-        str(today.year) + '/' + str(today.month) + '/' + str(today.day) + '/'
-        upload_path = str(today.year) + '/' + str(today.month) + \
-                                        '/' + str(today.day) + '/'
-        filename = urlparse(post_raw.image_url).path.split('/')[-1]
-        save_path = os.path.join(upload_path1, filename)
-        user_agent = 'Mozilla/5.0 (Windows NT 6.1; Win64; x64)'
-        headers = {'User-Agent': user_agent}
-        browser_headers = {'name': 'Alex',
-                      'location': 'Moscow', }
-        data = urlencode(browser_headers)
-        data = data.encode('ascii')
-
-        try:
-            req = Request(post_raw.image_url, data, headers, method="GET")
-            os.makedirs(os.path.dirname(upload_path), exist_ok=True)
-            with urlopen(req, timeout=7) as response, open(save_path, 'wb') as out_file:
-                data = response.read()
-                out_file.write(data)
-            post_raw.post_image = os.path.join(upload_path, filename)
-        except:
-            pass
-        post_raw.image_url = ""
-
-    if post_raw.post_image:
-        post_raw.main_image_srcset = srcsetThumb(post_raw.post_image, post_id=post_raw.id)
-        # change post_image link to webm
-        if not BeautifulSoup(post_raw.main_image_srcset, "html5lib").video == None:
-            post_raw.post_image_gif = post_raw.post_image
-            post_image_file = BeautifulSoup(post_raw.main_image_srcset, "html5lib")\
-                                        .video.source['src']
-            post_raw.post_image = stripMediaFromPath(post_image_file)
-        else:
-            soup = BeautifulSoup(post_raw.main_image_srcset, "html5lib")\
-                    .img['src']
-            link = findLink(iri_to_uri(soup))
-            file = uri_to_iri(findFile(link))
-            post_image_file = saveImage(link, file, 150, h=150)
-        post_raw.post_thumbnail = stripMediaFromPath(post_image_file)
-        post_raw.post_thumb_ext = post_image_file.split('.')[-1]
-
-    if not moderated:
-        post_raw.status = "P"
-    post_raw.save()
-
-    post = {}
-    post['title'] = post_raw.title
-    post['url'] = post_raw.get_absolute_url()
-    post['author'] = post_raw.author.id
-    post['id'] = post_raw.id
-    post['post'] = 1
-    cache_str = ["page_" + str(post_raw.category) + "*",
-                 "page_None*",
-                "good_posts_" + str(post_raw.category) + "_*",
-                 "good_posts_None_*",
-                 "post_single_" + str(post_raw.id)+"*"
-                ]
-    for i in cache_str:
-        cache.delete_pattern(i)
-
-    if not group:
-        group = "post-saved"
-    
-    Group(group).send({
-        "text": json.dumps(post) })
-
-
+from celery import Celery
+from datetime import timedelta
+import os, datetime, json, re
+from blog.models import (myUser, Post, Tag, Category, Comment, Complain)
+from django.utils.text import slugify
+from bs4 import BeautifulSoup
+from PIL import Image
+from urllib.parse import urlparse, urlencode
+import datetime, pytz
+from django.utils.encoding import uri_to_iri, iri_to_uri
+from urllib.request import urlopen, Request
+from blog.functions import (srcsets, srcsetThumb, saveImage,
+                            stripMediaFromPath,
+                           findLink, findFile, cleanTagsFromSoup)
+from django.core.cache import cache
+from channels import Group
+from myblog.celery import app
+
+delta_tz = datetime.timedelta(hours=+3)
+tz = datetime.timezone(delta_tz)
+
+
+@app.task(name="Rate")
+def Rate(userid, date_joined, votes_type, type, elem_id, vote):
+    """
+    Оценка постов и комментов
+    """
+    if type == "post":
+        element = Post.objects.only('id', 'rateable', 'category')\
+            .select_related('category').get(id=elem_id)
+    elif type == "comment":
+        element = Comment.objects.only('id').get(id=elem_id)
+
+    delta = datetime.timedelta(weeks=4)
+    dt = datetime.datetime.now(tz=tz)
+    uv = cache.get('user_votes_' + str(userid))
+
+    if uv is None:   # user votes кол-во голосов у юзеров
+        date_joined = pytz.utc.localize\
+            (datetime.datetime.strptime(date_joined, '%Y_%m_%d'))
+        user_rating = myUser.objects.only('rating').get(id=userid)
+        votes = {}
+        if date_joined < dt - delta:
+            coef = 0.25
+            votes['votes'] = 200
+        else:
+            coef = 0.0
+            votes['votes'] = 100
+
+        votes['weight'] = 0.25 + coef + user_rating.rating / 50
+
+        cache.set('user_votes_' + str(userid), votes, timeout=150)  # 86400 -1 day
+        uv = votes
+
+    uv_ttl = cache.ttl('user_votes_' + str(userid))
+
+    if uv['votes'] > 0:
+        p_data = {}
+        today = datetime.datetime.today().strftime('%Y_%m_%d_%H_%M_%S_%f')
+        if vote == str(1):
+            p_data['rate'] = uv['weight']
+        else:
+            p_data['rate'] = -uv['weight']
+        p_data['elem_id'] = element.id
+        if votes_type == "N":
+            # уменьшаем кол-во голосов у пользователя
+            uv['votes'] -= 1
+        r_key = 'vote_' + type + '_' + today
+
+        if type == "post":
+            if element.rateable:
+                # example   vote_post_2016_12_17_20_14_49_915851
+                p_data['category'] = element.category.id
+                cache.set(r_key, p_data, timeout=3024000)
+        elif type == "comment":
+                # example vote_comment_2016_12_24_23_16_35_968626
+                # {'elem_id': 55, 'rate': -0.5}
+            cache.set(r_key, p_data, timeout=3024000)
+
+        cache.set('user_votes_' + str(userid), uv, timeout=uv_ttl)
+
+        return "Element type {} with id {} rated".format(str(type), str(elem_id))
+    else:
+        return "No votes for user with id {},\
+            type {} with id {} rated"\
+            .format(str(user_id), str(type), str(elem_id))
+
+
+@app.task(name='ComplainObj')
+def ComplainObj(type, objid, userid, reason):
+    """
+    При жалобе создаём новый объект или обновляем существующий
+    """
+    if type == "comment":
+        obj = Comment.objects.only('id', 'can_complain').get(id=objid)
+    else:
+        obj = Post.objects.only('id', 'can_complain').get(id=objid)
+
+    user = myUser.objects.only('id', 'rating', 'email').get(id=userid)
+    if obj.can_complain:
+        if type =="comment":
+            complain, new = Complain.objects.get_or_create(comment=obj)
+        else:
+            complain, new = Complain.objects.get_or_create(post=obj)
+        
+        if not user.email in complain.users_complained:
+            complain_raw=json.loads(complain.users_complained)
+            complain_raw[user.email] = reason
+            complain.users_complained = json.dumps(complain_raw)
+            complain.score += user.rating
+            complain.save()
+    
+    
+
+@app.task(name="CalcRating")
+def CalcRating():
+    """
+    Подсчёт рейтинга постов, комментов и юзеров
+    """
+    # hot_rating = 1.0
+    # cat_list = Category.objects.all()
+    # today = datetime.datetime.today().strftime('%H')
+
+    # рэйтинг для комментов
+    votes_comment = cache.iter_keys('vote_comment_*')
+    comments_rates = {}
+    for i in votes_comment:
+        vote = cache.get(i)
+        cache.delete(i)
+        if not vote['elem_id'] in comments_rates:
+            comments_rates[vote['elem_id']] = {}
+            comments_rates[vote['elem_id']]['rate'] = vote['rate']
+            comments_rates[vote['elem_id']]['id'] = vote['elem_id']
+        else:
+            comments_rates[vote['elem_id']]['rate'] += vote['rate']
+    del votes_comment
+    comments = Comment.objects.filter(id__in=(comments_rates))
+    for i in comments_rates:  # update rating on comments
+        comment = comments.get(id=i)
+        cache_str = "comment_" + str(comment.post.id)
+        cache.delete(cache_str)
+        comment.rating += comments_rates[i]['rate']
+        comment.save()
+
+    votes_post = cache.iter_keys('vote_post_*')
+    posts_rates = {}
+    for i in votes_post:
+        vote = cache.get(i)
+        cache.delete(i)
+        if not vote['elem_id'] in posts_rates:
+            posts_rates[vote['elem_id']] = {}
+            posts_rates[vote['elem_id']]['category'] = vote['category']
+            posts_rates[vote['elem_id']]['rate'] = vote['rate']
+            posts_rates[vote['elem_id']]['id'] = vote['elem_id']
+        else:
+            posts_rates[vote['elem_id']]['rate'] += vote['rate']
+
+    # cache.set('rating_post_day_' + today, posts, timeout=88000)
+    del votes_post
+    posts = Post.objects.filter(id__in=(posts_rates)).select_related('author')
+    for post_id in posts_rates:  # update rating on posts
+        post = posts.get(id=post_id)
+        post.rating += posts_rates[post_id]['rate']
+        post.author.rating += posts_rates[post_id]['rate'] / 30
+        post.save()
+        post.author.save()
+        cache_str = "page_" + str(post.category.slug) + "_*"
+        cache.delete_pattern(cache_str)
+    cache.delete_pattern("page_None_*")
+    cache.delete_pattern("good_posts_*")
+
+
+@app.task(name="commentImage")
+def commentImage(comment_id):
+    """
+    Конвертирование картинок в комментах
+    """
+    comment_raw = Comment.objects.select_related('author').get(id=comment_id)
+    soup = srcsets(comment_raw.text, True)
+    # выравниваем видео по центру
+    ifr_links = soup.find_all("iframe")
+    ifr_class = []
+    if len(ifr_links) != 0:
+        for i in ifr_links:
+            for j in i['class']:
+                ifr_class.append(j)
+            ifr_class = [item for item in ifr_class if not item.startswith('center-align')]
+            ifr_class.append('center-align')
+            i['class'] = ifr_class
+
+    comment_raw.text = cleanTagsFromSoup(soup)
+    comment_raw.save()
+
+    cache_str = "comment_" + str(comment_raw.post.id)
+    cache.delete(cache_str)
+    cache_str= "count_comments_" + str(comment_raw.post.id)
+    cache.delete(cache_str)
+
+    comment = {}
+    comment['id'] = comment_raw.id
+    if comment_raw.parent:
+        comment['parent'] = comment_raw.parent.id
+    comment['author'] = comment_raw.author.username
+    if comment_raw.author.avatar:
+        comment['avatar'] = comment_raw.author.avatar.url
+    else:
+        comment['avatar'] = "/media/avatars/admin/avatar.jpg"
+
+    if comment_raw.level != 0:
+        comment['parent'] = comment_raw.parent.id
+    else:
+        comment['parent'] = 0
+    comment['text'] = comment_raw.text
+    comment['level'] = comment_raw.level
+    comment['comment'] = 1
+    comment['created'] = (comment_raw.created + delta_tz).strftime('%Y.%m.%d %H:%M')
+    group = comment_raw.post.get_absolute_url().strip('/').split('/')[-1]
+    #.split('-')[-1]
+    Group(group).send({
+        # "text": "[user] %s" % message.content['text'],
+        "text": json.dumps(comment),
+                        })
+    return "Comment with id {} from user {} \
+        proccessed".format(str(comment_id),
+        str(comment_raw.author.username))
+
+
+@app.task(name="addPost")
+def addPost(post_id, tag_list, moderated, group=None):
+    """
+    Обработка поста при добавлении
+    Тэги, сжатие и конвертация изображений и т.д.
+    Пост_id, лист тэгов, разрешение добавлять посты без проверки
+    и группу куда прислать уведомление о добавлении через сокет(при редактировании)
+    """
+    post_raw = Post.objects.select_related().prefetch_related().get(id=post_id)
+    nsfw = post_raw.private
+    have_new_tags = False
+    _ = False
+    post_raw.tags.clear()
+    tag = None
+    for i in tag_list:
+        if len(i) > 2:
+            if nsfw:
+                tag_url = slugify(i.lower() + "_nsfw", allow_unicode=True)
+                tag, _ = Tag.objects.get_or_create(name=i, url=tag_url)
+            else:
+                tag_url = slugify(i.lower(), allow_unicode=True)
+                tag, _ = Tag.objects.get_or_create(name=i, url=tag_url)
+                
+            if _:
+                have_new_tags = True
+                
+            post_raw.tags.add(tag)
+    if have_new_tags:
+        cache.delete_pattern("taglist")
+
+    if tag:
+        post_raw.main_tag = tag
+    else:
+        #tag = Tag.objects.get(id=8)
+        tag, _ = Tag.objects.get_or_create(name="Разное")
+        if _:
+            tag.url = "others"
+            tag.save()
+        post_raw.main_tag = tag
+
+    # ищем картинки в тексте
+    soup = srcsets(post_raw.text, True, post_id=post_id)
+
+    # выравниваем видео по центру
+    ifr_links = soup.find_all("iframe")
+    ifr_class = []
+    if len(ifr_links) != 0:
+        for i in ifr_links:
+            for j in i['class']:
+                ifr_class.append(j)
+            ifr_class = [item for item in ifr_class if not item.startswith('center-align')]
+            ifr_class.append('center-align')
+            i['class'] = ifr_class
+
+    post_raw.text = cleanTagsFromSoup(soup)
+
+    # image from url
+
+    if post_raw.image_url:
+        today = datetime.date.today()
+        upload_path1 = '/root/myblog/myblog/blog/static/media/' + \
+        str(today.year) + '/' + str(today.month) + '/' + str(today.day) + '/'
+        upload_path = str(today.year) + '/' + str(today.month) + \
+                                        '/' + str(today.day) + '/'
+        filename = urlparse(post_raw.image_url).path.split('/')[-1]
+        save_path = os.path.join(upload_path1, filename)
+        user_agent = 'Mozilla/5.0 (Windows NT 6.1; Win64; x64)'
+        headers = {'User-Agent': user_agent}
+        browser_headers = {'name': 'Alex',
+                      'location': 'Moscow', }
+        data = urlencode(browser_headers)
+        data = data.encode('ascii')
+
+        try:
+            req = Request(post_raw.image_url, data, headers, method="GET")
+            os.makedirs(os.path.dirname(upload_path), exist_ok=True)
+            with urlopen(req, timeout=7) as response, open(save_path, 'wb') as out_file:
+                data = response.read()
+                out_file.write(data)
+            post_raw.post_image = os.path.join(upload_path, filename)
+        except:
+            pass
+        post_raw.image_url = ""
+
+    if post_raw.post_image:
+        post_raw.main_image_srcset = srcsetThumb(post_raw.post_image, post_id=post_raw.id)
+        # change post_image link to webm
+        if not BeautifulSoup(post_raw.main_image_srcset, "html5lib").video == None:
+            post_raw.post_image_gif = post_raw.post_image
+            post_image_file = BeautifulSoup(post_raw.main_image_srcset, "html5lib")\
+                                        .video.source['src']
+            post_raw.post_image = stripMediaFromPath(post_image_file)
+        else:
+            soup = BeautifulSoup(post_raw.main_image_srcset, "html5lib")\
+                    .img['src']
+            link = findLink(iri_to_uri(soup))
+            file = uri_to_iri(findFile(link))
+            post_image_file = saveImage(link, file, 150, h=150)
+        post_raw.post_thumbnail = stripMediaFromPath(post_image_file)
+        post_raw.post_thumb_ext = post_image_file.split('.')[-1]
+
+    if not moderated:
+        post_raw.status = "P"
+    post_raw.save()
+
+    post = {}
+    post['title'] = post_raw.title
+    post['url'] = post_raw.get_absolute_url()
+    post['author'] = post_raw.author.id
+    post['id'] = post_raw.id
+    post['post'] = 1
+    cache_str = ["page_" + str(post_raw.category) + "*",
+                 "page_None*",
+                "good_posts_" + str(post_raw.category) + "_*",
+                 "good_posts_None_*",
+                 "post_single_" + str(post_raw.id)+"*"
+                ]
+    for i in cache_str:
+        cache.delete_pattern(i)
+
+    if not group:
+        group = "post-saved"
+    
+    Group(group).send({
+        "text": json.dumps(post) })
+
+
diff --git a/celerybeat-schedule b/celerybeat-schedule
index 7b74732..46b3c69 100644
Binary files a/celerybeat-schedule and b/celerybeat-schedule differ
diff --git a/db.sqlite3 b/db.sqlite3
index ae8c5dc..385247d 100644
Binary files a/db.sqlite3 and b/db.sqlite3 differ
diff --git a/myblog/settings.py b/myblog/settings.py
index d063c68..87cc185 100755
--- a/myblog/settings.py
+++ b/myblog/settings.py
@@ -1,314 +1,314 @@
-"""
-Django settings for myblog project.
-
-Generated by 'django-admin startproject' using Django 1.10.
-
-For more information on this file, see
-https://docs.djangoproject.com/en/1.10/topics/settings/
-
-For the full list of settings and their values, see
-https://docs.djangoproject.com/en/1.10/ref/settings/
-"""
-import os
-import datetime
-
-#CELERY_RESULT_BACKEND = 'django-db'  # for testing
-SITE_ID = 1
-
-#SILKY_PYTHON_PROFILER = True
-
-CHANNEL_LAYERS = {
-    "default": {
-        "BACKEND": "asgi_redis.RedisChannelLayer",
-        "ROUTING": "blog.routing.channel_routing",
-        "CONFIG": {
-            "hosts": [("redis://:Qvjuzowu177Qvjuzowu177Qvjuzowu177@127.0.0.1:6379/1")],
-            "capacity": 1000,
-        },
-    },
-}
-
-
-NOTEBOOK_ARGUMENTS = [
-    '--ip', '0.0.0.0',
-    '--port', '8888',
-]
-
-SHELL_PLUS_PRE_IMPORTS = (
-    ('blog.models', ('Post', 'myUser', 'Category', 'Tag', 'UserVotes')),
-    ('blog.functions', ('deleteThumb', 'srcsetThumb', 'findLink',
-                        'findFile', 'saveImage', 'srcsets',)),
-    ('django.core.cache', ('cache',)),
-    ('datetime'), ('os'), ('json'),
-    ('django.test', ('RequestFactory', 'Client')),
-    ('blog', ('views')),
-)
-
-# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
-BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
-
-# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/
-
-# SECURITY WARNING: keep the secret key used in production secret!
-SECRET_KEY = '*er@wzdwuga0)0u%j22+pthd0)wzgl%oka)+a^na37()xgr%f9'
-
-# SECURITY WARNING: don't run with debug turned on in production!
-DEBUG = True
-# SILKY_PYTHON_PROFILER = True
-
-LOGIN_URL = '/login'
-
-FROALA_INCLUDE_JQUERY = False
-FROALA_UPLOAD_PATH = str(datetime.date.today().year) + '/'\
-    + str(datetime.date.today().month)\
-    + '/' + str(datetime.date.today().day) + '/'
-
-ALLOWED_HOSTS = ['*']
-DEBUG_TOOLBAR_PATCH_SETTINGS = False
-JQUERY_URL = ""
-SHOW_COLLAPSED = True
-INTERNAL_IPS = ['192.168.1.68', '192.168.1.70', '127.0.0.1', '192.168.1.244']
-
-EMAIL_USE_TLS = True
-EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
-EMAIL_HOST = 'smtp.gmail.com'
-EMAIL_PORT = 587
-EMAIL_HOST_USER = 'asmyshlyaev177@gmail.com'
-EMAIL_HOST_PASSWORD = 'mypass'
-DEFAULT_EMAIL_FROM = 'asmyshlyaev177@gmail.com'
-
-
-SOCIAL_AUTH_ADMIN_USER_SEARCH_FIELDS = ['email']
-SOCIAL_AUTH_FACEBOOK_KEY = 'key'
-SOCIAL_AUTH_FACEBOOK_SECRET = 'secret'
-SOCIAL_AUTH_FACEBOOK_SCOPE = ['email']
-SOCIAL_AUTH_FACEBOOK_PROFILE_EXTRA_PARAMS = {
-                    'locale': 'ru_RU',
-                    'fields': 'name, email'
-}
-SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = 'key'
-SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = 'secret'
-SOCIAL_AUTH_VK_OAUTH2_KEY = 'key'
-SOCIAL_AUTH_VK_OAUTH2_SECRET = 'secret'
-SOCIAL_AUTH_VK_OAUTH2_SCOPE = ['email']
-# SOCIAL_AUTH_VK_APP_USER_MODE = 2
-SOCIAL_AUTH_USER_MODEL = 'blog.myUser'
-SOCIAL_AUTH_PROTECTED_USER_FIELDS = ['email', ]
-
-#LOGIN_REDIRECT_URL = '/'
-#LOGOUT_REDIRECT_URL = '/'
-
-# SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/'
-# SOCIAL_AUTH_LOGIN_ERROR_URL = '/login-error/'
-# SOCIAL_AUTH_NEW_USER_REDIRECT_URL = '/new-users-redirect-url/'
-# SOCIAL_AUTH_NEW_ASSOCIATION_REDIRECT_URL = '/new-association-redirect-url/'
-# SOCIAL_AUTH_INACTIVE_USER_URL = '/inactive-user/'
-SOCIAL_AUTH_URL_NAMESPACE = 'social'
-
-
-SOCIAL_AUTH_PIPELINE = (
-    'social.pipeline.social_auth.social_details',
-    'social.pipeline.social_auth.social_uid',
-    'social.pipeline.social_auth.auth_allowed',
-    'social.pipeline.social_auth.social_user',
-    'social.pipeline.user.get_username',
-    'social.pipeline.social_auth.associate_by_email',  # <--- enable this one
-    'social.pipeline.user.create_user',
-    'social.pipeline.social_auth.associate_user',
-    'social.pipeline.social_auth.load_extra_data',
-    'social.pipeline.user.user_details',
-)
-
-AUTHENTICATION_BACKENDS = (
-    'social_core.backends.google.GoogleOAuth2',
-    'blog.authentication.UsernameAuthBackend',
-    'blog.authentication.EmailAuthBackend',
-
-    'social_core.backends.facebook.FacebookOAuth2',
-    'social_core.backends.vk.VKOAuth2',
-    'django.contrib.auth.backends.ModelBackend',
-)
-
-AUTH_USER_MODEL = 'blog.myUser'
-
-CACHES = {
-    "default": {
-        "BACKEND": "django_redis.cache.RedisCache",
-        "LOCATION": "unix:////root/myblog/tmp/redis.sock?db=0",
-        "OPTIONS": {
-            "PASSWORD": "Qvjuzowu177Qvjuzowu177Qvjuzowu177",
-            "CLIENT_CLASS": "django_redis.client.DefaultClient",
-            "CONNECTION_POOL_KWARGS": {"max_connections": 500},
-        }
-    }
-}
-SESSION_ENGINE = "django.contrib.sessions.backends.cache"
-SESSION_CACHE_ALIAS = "default"
-
-INSTALLED_APPS = [
-    'django.contrib.staticfiles',
-    'debug_toolbar',
-    'django.contrib.admin',
-    'django.contrib.auth',
-    'django.contrib.contenttypes',
-    'django.contrib.sessions',
-    'django.contrib.messages',
-    'blog',
-    'froala_editor',
-    'compressor',
-    #'django_cleanup',
-    'django_extensions',
-    'mptt',
-    'channels',
-    #'django_celery_results',
-    #'django_celery_beat',
-    'social_django',
-    'django.contrib.sites',
-    'django.contrib.sitemaps',
-    #'silk',
-    'meta',
-]
- 
-CELERY_BROKER_URL = 'amqp://django:Qvjuzowu177Qvjuzowu177Qvjuzowu177@127.0.0.1:5672//'
-
-
-TEMPLATE_DEBUG = True
-THUMBNAIL_DEBUG = True
-THUMBNAIL_PRESERVE_FORMAT = True
-
-BASE_URL = 'http://192.168.1.70'
-STATIC_URL = '/static/'
-STATIC_ROOT = '/root/myblog/myblog/blog/static/'
-MEDIA_ROOT = '/root/myblog/myblog/blog/static/media/'
-MEDIA_URL = '/media/'
-SITE_DESCRIPTION = 'Site description'
-GPLUS = 'google_plus_url'
-FB = 'fb_url'
-VK = 'vk_url'
-META_SITE_PROTOCOL = 'http'
-META_SITE_DOMAIN = '192.168.1.70'
-META_SITE_NAME = "Test site"
-META_USE_OG_PROPERTIES = True
-META_USE_TWITTER_PROPERTIES = True
-META_USE_GOOGLEPLUS_PROPERTIES = True
-LOGO_SRC = "/123.png"
-LOGO_TEXT = "My logo"
-LOGO_FORMAT = "png"
-
-
-STATICFILES_FINDERS = (
-    'django.contrib.staticfiles.finders.FileSystemFinder',
-    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
-    # other finders..
-    'compressor.finders.CompressorFinder',
-)
-
-# COMPRESS_ROOT = STATIC_URL
-# COMPRESS_OFFLINE = True
-COMPRESS_ENABLED = False  # удобней выключить потом включу
-COMPRESS_CSS_FILTERS = ['compressor.filters.css_default.CssAbsoluteFilter',
-                        'compressor.filters.cssmin.rCSSMinFilter']
-# IMAGEKIT_DEFAULT_CACHEFILE_STRATEGY = 'imagekit.cachefiles.strategies.JustInTime'
-
-# MIDDLEWARE = [  #for debug toolbar
-MIDDLEWARE_CLASSES = [
-    'debug_toolbar.middleware.DebugToolbarMiddleware',
-    'django.middleware.cache.UpdateCacheMiddleware',
-    'django.middleware.security.SecurityMiddleware',
-    'django.contrib.sessions.middleware.SessionMiddleware',
-    'django.middleware.common.CommonMiddleware',
-    'django.middleware.csrf.CsrfViewMiddleware',
-    'django.contrib.auth.middleware.AuthenticationMiddleware',
-    'django.contrib.messages.middleware.MessageMiddleware',
-    'django.middleware.clickjacking.XFrameOptionsMiddleware',
-    'django.middleware.locale.LocaleMiddleware',
-    'django.middleware.cache.FetchFromCacheMiddleware',
-    #'silk.middleware.SilkyMiddleware',
-
-]
-
-ROOT_URLCONF = 'myblog.urls'
-
-TEMPLATES = [
-    {
-        'BACKEND': 'django.template.backends.django.DjangoTemplates',
-        'DIRS': ['templates'],
-        'APP_DIRS': True,
-        'OPTIONS': {
-            'context_processors': [
-                'django.contrib.auth.context_processors.auth',
-                'django.template.context_processors.debug',
-                'django.template.context_processors.request',
-                'social_django.context_processors.backends',
-                'social_django.context_processors.login_redirect',
-                'django.contrib.messages.context_processors.messages',
-            ],
-        },
-    },
-]
-
-WSGI_APPLICATION = 'myblog.wsgi.application'
-
-
-# Database
-# https://docs.djangoproject.com/en/1.10/ref/settings/#databases
-
-"""DATABASES = {
-    'default': {
-        'ENGINE': 'django.db.backends.sqlite3',
-        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
-    }
-}"""
-
-DATABASES = {
-    'default': {
-        'ENGINE': 'django.db.backends.postgresql',
-        'NAME': 'myblog',
-        'USER': 'mybloguser',
-        'PASSWORD': 'Qvjuzowu177Qvjuzowu177Qvjuzowu177',
-        'HOST': '/var/run/postgresql',
-        'CONN_MAX_AGE': 0, #none for production
-        #'PORT': '6432',
-    }
-}
-
-
-# Password validation
-# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators
-
-AUTH_PASSWORD_VALIDATORS = [
-    {
-        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
-    },
-    {
-        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
-    },
-    {
-        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
-    },
-    {
-        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
-    },
-]
-
-
-# Internationalization
-# https://docs.djangoproject.com/en/1.10/topics/i18n/
-
-LANGUAGE_CODE = 'ru'
-
-TIME_ZONE = 'Europe/Moscow'
-
-USE_I18N = True
-USE_L10N = True
-LANGUAGES = [
-    ('ru', ('Russian')),
-]
-
-
-USE_TZ = True
-
-SECURE_HSTS_PRELOAD = False
-
-# Static files (CSS, JavaScript, Images)
-# https://docs.djangoproject.com/en/1.10/howto/static-files/
+"""
+Django settings for myblog project.
+
+Generated by 'django-admin startproject' using Django 1.10.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/1.10/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/1.10/ref/settings/
+"""
+import os
+import datetime
+
+#CELERY_RESULT_BACKEND = 'django-db'  # for testing
+SITE_ID = 1
+
+#SILKY_PYTHON_PROFILER = True
+
+CHANNEL_LAYERS = {
+    "default": {
+        "BACKEND": "asgi_redis.RedisChannelLayer",
+        "ROUTING": "blog.routing.channel_routing",
+        "CONFIG": {
+            "hosts": [("redis://:Qvjuzowu177Qvjuzowu177Qvjuzowu177@127.0.0.1:6379/1")],
+            "capacity": 1000,
+        },
+    },
+}
+
+
+NOTEBOOK_ARGUMENTS = [
+    '--ip', '0.0.0.0',
+    '--port', '8888',
+]
+
+SHELL_PLUS_PRE_IMPORTS = (
+    ('blog.models', ('Post', 'myUser', 'Category', 'Tag', 'UserVotes')),
+    ('blog.functions', ('deleteThumb', 'srcsetThumb', 'findLink',
+                        'findFile', 'saveImage', 'srcsets',)),
+    ('django.core.cache', ('cache',)),
+    ('datetime'), ('os'), ('json'),
+    ('django.test', ('RequestFactory', 'Client')),
+    ('blog', ('views')),
+)
+
+# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
+BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
+
+# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = '*er@wzdwuga0)0u%j22+pthd0)wzgl%oka)+a^na37()xgr%f9'
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+# SILKY_PYTHON_PROFILER = True
+
+LOGIN_URL = '/login'
+
+FROALA_INCLUDE_JQUERY = False
+FROALA_UPLOAD_PATH = str(datetime.date.today().year) + '/'\
+    + str(datetime.date.today().month)\
+    + '/' + str(datetime.date.today().day) + '/'
+
+ALLOWED_HOSTS = ['*']
+DEBUG_TOOLBAR_PATCH_SETTINGS = False
+JQUERY_URL = ""
+SHOW_COLLAPSED = True
+INTERNAL_IPS = ['192.168.1.68', '192.168.1.70', '127.0.0.1', '192.168.1.244']
+
+EMAIL_USE_TLS = True
+EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
+EMAIL_HOST = 'smtp.gmail.com'
+EMAIL_PORT = 587
+EMAIL_HOST_USER = 'asmyshlyaev177@gmail.com'
+EMAIL_HOST_PASSWORD = 'mypass'
+DEFAULT_EMAIL_FROM = 'asmyshlyaev177@gmail.com'
+
+
+SOCIAL_AUTH_ADMIN_USER_SEARCH_FIELDS = ['email']
+SOCIAL_AUTH_FACEBOOK_KEY = 'key'
+SOCIAL_AUTH_FACEBOOK_SECRET = 'secret'
+SOCIAL_AUTH_FACEBOOK_SCOPE = ['email']
+SOCIAL_AUTH_FACEBOOK_PROFILE_EXTRA_PARAMS = {
+                    'locale': 'ru_RU',
+                    'fields': 'name, email'
+}
+SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = 'key'
+SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = 'secret'
+SOCIAL_AUTH_VK_OAUTH2_KEY = 'key'
+SOCIAL_AUTH_VK_OAUTH2_SECRET = 'secret'
+SOCIAL_AUTH_VK_OAUTH2_SCOPE = ['email']
+# SOCIAL_AUTH_VK_APP_USER_MODE = 2
+SOCIAL_AUTH_USER_MODEL = 'blog.myUser'
+SOCIAL_AUTH_PROTECTED_USER_FIELDS = ['email', ]
+
+#LOGIN_REDIRECT_URL = '/'
+#LOGOUT_REDIRECT_URL = '/'
+
+# SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/'
+# SOCIAL_AUTH_LOGIN_ERROR_URL = '/login-error/'
+# SOCIAL_AUTH_NEW_USER_REDIRECT_URL = '/new-users-redirect-url/'
+# SOCIAL_AUTH_NEW_ASSOCIATION_REDIRECT_URL = '/new-association-redirect-url/'
+# SOCIAL_AUTH_INACTIVE_USER_URL = '/inactive-user/'
+SOCIAL_AUTH_URL_NAMESPACE = 'social'
+
+
+SOCIAL_AUTH_PIPELINE = (
+    'social.pipeline.social_auth.social_details',
+    'social.pipeline.social_auth.social_uid',
+    'social.pipeline.social_auth.auth_allowed',
+    'social.pipeline.social_auth.social_user',
+    'social.pipeline.user.get_username',
+    'social.pipeline.social_auth.associate_by_email',  # <--- enable this one
+    'social.pipeline.user.create_user',
+    'social.pipeline.social_auth.associate_user',
+    'social.pipeline.social_auth.load_extra_data',
+    'social.pipeline.user.user_details',
+)
+
+AUTHENTICATION_BACKENDS = (
+    'social_core.backends.google.GoogleOAuth2',
+    'blog.authentication.UsernameAuthBackend',
+    'blog.authentication.EmailAuthBackend',
+
+    'social_core.backends.facebook.FacebookOAuth2',
+    'social_core.backends.vk.VKOAuth2',
+    'django.contrib.auth.backends.ModelBackend',
+)
+
+AUTH_USER_MODEL = 'blog.myUser'
+
+CACHES = {
+    "default": {
+        "BACKEND": "django_redis.cache.RedisCache",
+        "LOCATION": "unix:////root/myblog/tmp/redis.sock?db=0",
+        "OPTIONS": {
+            "PASSWORD": "Qvjuzowu177Qvjuzowu177Qvjuzowu177",
+            "CLIENT_CLASS": "django_redis.client.DefaultClient",
+            "CONNECTION_POOL_KWARGS": {"max_connections": 500},
+        }
+    }
+}
+SESSION_ENGINE = "django.contrib.sessions.backends.cache"
+SESSION_CACHE_ALIAS = "default"
+
+INSTALLED_APPS = [
+    'django.contrib.staticfiles',
+     #'debug_toolbar',
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'blog',
+    'froala_editor',
+    'compressor',
+    #'django_cleanup',
+    'django_extensions',
+    'mptt',
+    'channels',
+    #'django_celery_results',
+    #'django_celery_beat',
+    'social_django',
+    'django.contrib.sites',
+    'django.contrib.sitemaps',
+    #'silk',
+    'meta',
+]
+ 
+CELERY_BROKER_URL = 'amqp://django:Qvjuzowu177Qvjuzowu177Qvjuzowu177@127.0.0.1:5672//'
+
+
+TEMPLATE_DEBUG = True
+THUMBNAIL_DEBUG = True
+THUMBNAIL_PRESERVE_FORMAT = True
+
+BASE_URL = 'http://asmyshlyaev177.tk'
+STATIC_URL = '/static/'
+STATIC_ROOT = '/root/myblog/myblog/blog/static/'
+MEDIA_ROOT = '/root/myblog/myblog/blog/static/media/'
+MEDIA_URL = '/media/'
+SITE_DESCRIPTION = 'Site description'
+GPLUS = 'google_plus_url'
+FB = 'fb_url'
+VK = 'vk_url'
+META_SITE_PROTOCOL = 'http'
+META_SITE_DOMAIN = 'asmyshlyaev177.tk'
+META_SITE_NAME = "Test site"
+META_USE_OG_PROPERTIES = True
+META_USE_TWITTER_PROPERTIES = True
+META_USE_GOOGLEPLUS_PROPERTIES = True
+LOGO_SRC = "/123.png"
+LOGO_TEXT = "My logo"
+LOGO_FORMAT = "png"
+
+
+STATICFILES_FINDERS = (
+    'django.contrib.staticfiles.finders.FileSystemFinder',
+    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
+    # other finders..
+    'compressor.finders.CompressorFinder',
+)
+
+# COMPRESS_ROOT = STATIC_URL
+# COMPRESS_OFFLINE = True
+COMPRESS_ENABLED = True  # удобней выключить потом включу
+COMPRESS_CSS_FILTERS = ['compressor.filters.css_default.CssAbsoluteFilter',
+                        'compressor.filters.cssmin.rCSSMinFilter']
+# IMAGEKIT_DEFAULT_CACHEFILE_STRATEGY = 'imagekit.cachefiles.strategies.JustInTime'
+
+# MIDDLEWARE = [  #for debug toolbar
+MIDDLEWARE_CLASSES = [
+    #'debug_toolbar.middleware.DebugToolbarMiddleware',
+    'django.middleware.cache.UpdateCacheMiddleware',
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+    'django.middleware.locale.LocaleMiddleware',
+    'django.middleware.cache.FetchFromCacheMiddleware',
+    #'silk.middleware.SilkyMiddleware',
+
+]
+
+ROOT_URLCONF = 'myblog.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': ['templates'],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.contrib.auth.context_processors.auth',
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'social_django.context_processors.backends',
+                'social_django.context_processors.login_redirect',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'myblog.wsgi.application'
+
+
+# Database
+# https://docs.djangoproject.com/en/1.10/ref/settings/#databases
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+    }
+}
+
+"""DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.postgresql',
+        'NAME': 'myblog',
+        'USER': 'mybloguser',
+        'PASSWORD': 'Qvjuzowu177Qvjuzowu177Qvjuzowu177',
+        'HOST': '/var/run/postgresql',
+        'CONN_MAX_AGE': 0, #none for production
+        #'PORT': '6432',
+    }
+}"""
+
+
+# Password validation
+# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/1.10/topics/i18n/
+
+LANGUAGE_CODE = 'ru'
+
+TIME_ZONE = 'Europe/Moscow'
+
+USE_I18N = True
+USE_L10N = True
+LANGUAGES = [
+    ('ru', ('Russian')),
+]
+
+
+USE_TZ = True
+
+SECURE_HSTS_PRELOAD = False
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/1.10/howto/static-files/
diff --git a/nginx_new.conf b/nginx_new.conf
index 70276f4..b1da800 100755
--- a/nginx_new.conf
+++ b/nginx_new.conf
@@ -110,14 +110,14 @@ http {
 
   #server {
     # if no Host match, close the connection to prevent host spoofing
-    #listen 80 deferred default_server;
+    #listen 3000 deferred default_server;
     #return 444;
   #}
 
 
   server {
     # use 'listen 8080 deferred;' for Linux
-    listen 80 deferred backlog=40096;
+    listen 3000 deferred backlog=40096;
     proxy_cache one;
     proxy_cache_key "$host$request_uri$http_x_requested_with$cookie_sessionid";
     #proxy_cache_key "$request_method$host$request_uri$http_x_requested_with";
@@ -132,7 +132,7 @@ http {
 
 
     # set the correct host(s) for your site
-    server_name 192.168.1.70;
+    server_name asmyshlyaev177.tk;
 
     #keepalive_timeout 10;
 
@@ -169,8 +169,8 @@ http {
 	proxy_http_version 1.1;
 	proxy_set_header Upgrade $http_upgrade;
 	proxy_set_header Connection $connection_upgrade;
-	#proxy_pass http://127.0.0.1:8080;
-	proxy_pass http://unix:/root/myblog/tmp/daphne.sock;
+	proxy_pass http://127.0.0.1:3001;
+	#proxy_pass http://unix:/root/myblog/tmp/daphne.sock;
 	}
     
 
diff --git a/requirements.txt b/requirements.txt
index d5a4e48..f8b5dba 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,6 +1,5 @@
 amqp==2.1.4
 appdirs==1.4.3
-asgi-ipc==1.3.1
 asgi-redis==1.3.0
 asgiref==1.1.1
 attrs==16.3.0
@@ -79,7 +78,6 @@ pickleshare==0.7.4
 pilkit==2.0
 Pillow==4.0.0
 ply==3.10
-posix-ipc==1.0.0
 profiling==0.1.1
 prompt-toolkit==1.0.13
 psycopg2==2.7
diff --git a/supervisord_asgi.conf b/supervisord_asgi.conf
index 17dc3a0..4362c05 100755
--- a/supervisord_asgi.conf
+++ b/supervisord_asgi.conf
@@ -111,7 +111,7 @@ environment=
 	VIRTUAL_ENV=/root/myblog
 	
 directory=/root/myblog/myblog
-command=/root/myblog/bin/daphne myblog.asgi:channel_layer -u /root/myblog/tmp/daphne.sock --root-path /root/myblog/myblog/blog
+command=/root/myblog/bin/daphne myblog.asgi:channel_layer -b 0.0.0.0 -p 3001 --root-path /root/myblog/myblog/blog
 stopsignal=QUIT
 numprocs=1
 user=root
@@ -190,17 +190,17 @@ stderr_logfile_backups = 5
 #stdout_logfile = /var/log/uwsgi.log
 #stderr_logfile = /var/log/uwsgi-error.log
 
-[program:postgresql]
-command=/usr/pgsql-9.6/bin/postgres -D /var/lib/pgsql/9.6/data/
-numprocs=1
-user=postgres
-startretries =5
-startsecs=30
-stopwaitsecs=40
-autostart=true
-autorestart=true
-redirect_stderr=true
-stopsignal=SIGINT
-stdout_logfile = /var/log/postgresql.log
-stderr_logfile = /var/log/postgresql-error.log
+#[program:postgresql]
+#command=/usr/pgsql-9.6/bin/postgres -D /var/lib/pgsql/9.6/data/
+#numprocs=1
+#user=postgres
+#startretries =5
+#startsecs=30
+#stopwaitsecs=40
+#autostart=true
+#autorestart=true
+#redirect_stderr=true
+#stopsignal=SIGINT
+#stdout_logfile = /var/log/postgresql.log
+#stderr_logfile = /var/log/postgresql-error.log
 
