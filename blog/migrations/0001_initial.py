# -*- coding: utf-8 -*-
# Generated by Django 1.10.1 on 2017-03-31 10:11
from __future__ import unicode_literals

import blog.functions
import blog.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import imagekit.models.fields
import meta.models
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='myUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(max_length=30, unique=True, verbose_name='Логин')),
                ('rateable', models.BooleanField(default=True)),
                ('avatar', imagekit.models.fields.ProcessedImageField(blank=True, upload_to=blog.models.myUser.user_directory_path, verbose_name='Аватар')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('is_staff', models.BooleanField(default=False, verbose_name='Персонал')),
                ('moderated', models.BooleanField(default=False, verbose_name='Модерируется')),
                ('moderator', models.BooleanField(default=False, verbose_name='Модератор')),
                ('user_last_login', models.DateTimeField(auto_now=True)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('can_post', models.BooleanField(default=True, verbose_name='Может добавлять посты')),
                ('can_comment', models.BooleanField(default=True, verbose_name='Может комментировать')),
                ('can_complain', models.BooleanField(default=True, verbose_name='Может жаловаться')),
                ('rating', models.FloatField(default=0.0, verbose_name='Рейтинг')),
                ('votes_amount', models.CharField(choices=[('U', 'Unlimited'), ('N', 'Normal'), ('B', 'Blocked')], default='N', max_length=1)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name_plural': 'Пользователи',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True)),
                ('description', models.TextField(max_length=400)),
                ('slug', models.CharField(blank=True, max_length=250, verbose_name='URL')),
                ('order', models.SmallIntegerField(blank=True, default=1)),
            ],
            options={
                'verbose_name_plural': 'categories',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(max_length=3700)),
                ('removed', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('rating', models.FloatField(default=0.0, verbose_name='Рейтинг')),
                ('can_complain', models.BooleanField(default=True, verbose_name='Разрешено жаловаться')),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='blog.Comment')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Complain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('edited', models.DateTimeField(auto_now=True)),
                ('score', models.FloatField(blank=True, default=0, null=True)),
                ('users_complained', models.TextField(blank=True, default='{}', max_length=2000, null=True)),
                ('comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='blog.Comment')),
            ],
            options={
                'verbose_name_plural': 'Жалобы',
                'ordering': ['edited'],
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mform_type', models.CharField(blank=True, choices=[('Article', 'Статья'), ('SoftwareApplication', 'Приложение'), ('BlogPosting', 'Пост'), ('NewsArticle', 'Новость'), ('WebSite', 'Сайт')], max_length=30, null=True, verbose_name='Тип')),
                ('title', models.CharField(max_length=150, verbose_name='Заголовок')),
                ('private', models.BooleanField(default=False, verbose_name='NSFW')),
                ('rateable', models.BooleanField(default=True, verbose_name='Разрешено голосовать')),
                ('comments', models.BooleanField(default=True, verbose_name='Разрешено комментировать')),
                ('can_complain', models.BooleanField(default=True, verbose_name='Разрешено жаловаться')),
                ('locked', models.BooleanField(default=False, verbose_name='Не разрешать редактировать автору')),
                ('description', models.TextField(max_length=700, verbose_name='Описание')),
                ('text', models.TextField()),
                ('post_image', models.FileField(blank=True, max_length=500, null=True, upload_to='2017/3/31/', validators=[blog.functions.validate_post_image])),
                ('post_image_gif', models.FileField(blank=True, max_length=500, null=True, upload_to='2017/3/31/')),
                ('image_url', models.URLField(blank=True, max_length=1000, null=True)),
                ('main_image_srcset', models.TextField(blank=True, max_length=800, null=True)),
                ('post_thumbnail', models.ImageField(blank=True, max_length=500, null=True, upload_to='2017/3/31/')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('edited', models.DateTimeField(auto_now=True)),
                ('published', models.DateTimeField(default=django.utils.timezone.now)),
                ('rating', models.FloatField(default=0.0, verbose_name='Рейтинг')),
                ('url', models.CharField(blank=True, max_length=330)),
                ('status', models.CharField(choices=[('D', 'Черновик/удалён'), ('P', 'Опубликован')], default='D', max_length=1, verbose_name='Статус')),
                ('author', models.ForeignKey(default=1, on_delete=django.db.models.deletion.SET_DEFAULT, to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blog.Category')),
            ],
            options={
                'verbose_name_plural': 'posts',
                'ordering': ['-published'],
            },
            bases=(meta.models.ModelMeta, models.Model),
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('url', models.CharField(max_length=140, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('private', models.BooleanField(default=False)),
                ('rateable', models.BooleanField(default=True)),
                ('description', models.TextField(blank=True, max_length=700, null=True)),
                ('rating', models.FloatField(default=0.0, verbose_name='Рейтинг')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='blog.Category')),
            ],
            options={
                'verbose_name_plural': 'Тэги',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='UserVotes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('votes_amount', models.IntegerField(default=10)),
                ('weight', models.FloatField(default=0.25)),
                ('vote_type', models.CharField(choices=[('U', 'Unlimited'), ('N', 'Normal'), ('B', 'Blocked')], default='N', max_length=1)),
                ('block_date', models.DateTimeField(blank=True, null=True)),
                ('manual', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='post',
            name='main_tag',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='blog.Tag'),
        ),
        migrations.AddField(
            model_name='post',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='posts', related_query_name='tag', to='blog.Tag'),
        ),
        migrations.AddField(
            model_name='complain',
            name='post',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='blog.Post'),
        ),
        migrations.AddField(
            model_name='comment',
            name='post',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='blog.Post'),
        ),
        migrations.AddField(
            model_name='myuser',
            name='moderator_of_categories',
            field=models.ManyToManyField(blank=True, to='blog.Category', verbose_name='Модерирует категории'),
        ),
        migrations.AddField(
            model_name='myuser',
            name='moderator_of_tags',
            field=models.ManyToManyField(blank=True, to='blog.Tag', verbose_name='Модерирует тэги'),
        ),
        migrations.AddField(
            model_name='myuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
